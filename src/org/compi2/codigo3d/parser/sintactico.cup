package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;

/*simbolos de operaciones logicas*/
terminal String or,and,not;
/*simbolos de operaciones relacionales*/
terminal String mayor,menor,igualIgual,mayorIgual,menorIgual,noIgual;

terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
nonterminal NodoC3D inicial, expresion,expresionL,expresionR;

precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 
precedence left PAR_IZQ,PAR_DER;
precedence left igualIgual,mayor,menor,mayorIgual,menorIgual,noIgual;
precedence left or;
precedence left and;
precedence right not;

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} expresionL:exp 
                    {: 
                        RESULT = exp;
                        if(exp.getCad()!=null){
                            ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                        }else{
                        String c3d=exp.etv+": //verdadera/s\n";
                        c3d+=exp.etf+": //falsa/s";
                        ControlC3D.agregarC3D(c3d);
                        }
                    :};

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;


expresionR   ::= expresion:izq igualIgual expresion:der
                    {: 
                        String etv=ControlC3D.getEti();
                        String etf=ControlC3D.getEti();
                        String c3d="if "+izq.getCad()+" == "+der.getCad()+" go to "+etv+"\n";
                        c3d+="go to "+etf+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etv,etf); 
                    :}
            |   expresion:izq mayor expresion:der
                    {: 
                        String etv=ControlC3D.getEti();
                        String etf=ControlC3D.getEti();
                        String c3d="if "+izq.getCad()+" > "+der.getCad()+" go to "+etv+"\n";
                        c3d+="go to "+etf+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etv,etf); 
                    :}
            |   expresion:izq mayorIgual expresion:der
                    {: 
                        String etv=ControlC3D.getEti();
                        String etf=ControlC3D.getEti();
                        String c3d="if "+izq.getCad()+" >= "+der.getCad()+" go to "+etv+"\n";
                        c3d+="go to "+etf+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etv,etf);  
                    :}
            |   expresion:izq menor expresion:der
                    {: 
                        String etv=ControlC3D.getEti();
                        String etf=ControlC3D.getEti();
                        String c3d="if "+izq.getCad()+" < "+der.getCad()+" go to "+etv+"\n";
                        c3d+="go to "+etf+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etv,etf); 
                    :}
            |   expresion:izq menorIgual expresion:der
                    {: 
                        String etv=ControlC3D.getEti();
                        String etf=ControlC3D.getEti();
                        String c3d="if "+izq.getCad()+" <= "+der.getCad()+" go to "+etv+"\n";
                        c3d+="go to "+etf+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etv,etf); 
                    :}
            |   expresion:izq noIgual expresion:der
                    {: 
                        String etv=ControlC3D.getEti();
                        String etf=ControlC3D.getEti();
                        String c3d="if "+izq.getCad()+" != "+der.getCad()+" go to "+etv+"\n";
                        c3d+="go to "+etf+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etv,etf); 
                    :}
            
            |   expresion:exp 
                    {: RESULT = exp; :}
            ;


    expresionL   ::= expresionL:izq and {:String c3d=izq.etv+" :\n";ControlC3D.agregarC3D(c3d);:} expresionL:der
                    {: 
                        RESULT=new NodoC3D();
                        RESULT.etv=der.etv;
                        RESULT.etf=izq.etf+","+der.etf;
                        
                    :}
            |   expresionL:izq or {:String c3d=izq.etf+" :\n";ControlC3D.agregarC3D(c3d);:} expresionL:der
                    {: 
                        RESULT=new NodoC3D();
                        RESULT.etv=izq.etv+","+der.etv;
                        RESULT.etf=der.etf;
                    :}
           
            |   not expresionL:exp 
                    {: 
                        RESULT=new NodoC3D();
                        RESULT.etv=exp.etf;
                        RESULT.etf=exp.etv;
                    :}
            |   PAR_IZQ expresionL:exp PAR_DER   
                    {: RESULT=exp;:}
            |   expresionR:exp           
                    {: RESULT = exp; :}
            ;